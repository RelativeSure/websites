---
// Enhanced translation system compatible with Starlight's i18n
const t = (key: string) => {
	// Default translations - could be extended to use Starlight's i18n system
	const translations = {
		'themeSelect.accessibleLabel': 'Select theme',
		'themeSelect.light': 'Light',
		'themeSelect.dark': 'Dark',
		'themeSelect.auto': 'Auto',
		'themeSelect.blue': 'Blue Ocean',
		'themeSelect.forest': 'Forest Green',
		'themeSelect.sunset': 'Sunset Orange',
		'themeSelect.purple': 'Purple Night',
		'themeSelect.label': 'Theme:'
	};
	return translations[key as keyof typeof translations] || key;
};
---

<starlight-theme-select>
	<div class="theme-switcher">
		<label>
			<span class="sr-only">{t('themeSelect.accessibleLabel')}</span>
			<span class="theme-label">{t('themeSelect.label')}</span>
			<div class="theme-control">
				<svg class="icon light" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
					<path d="M12 18a6 6 0 1 1 0-12 6 6 0 0 1 0 12ZM11 1h2v3h-2V1Zm0 19h2v3h-2v-3ZM3.515 4.929l1.414-1.414L7.05 5.636 5.636 7.05 3.515 4.93ZM16.95 18.364l1.414-1.414 2.121 2.121-1.414 1.414-2.121-2.121Zm2.121-14.85 1.414 1.415-2.121 2.121-1.414-1.414 2.121-2.121ZM5.636 16.95l1.414 1.414-2.121 2.121-1.414-1.414 2.121-2.121ZM23 11v2h-3v-2h3ZM4 11v2H1v-2h3Z"/>
				</svg>
				<svg class="icon dark" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
					<path d="M11.1 12.08c-2.33-4.51-.5-8.48.53-10.07C6.27 2.2 1.98 6.59 1.98 12c0 .14.02.28.02.42.62-.27 1.29-.42 2-.42 1.66 0 3.18.69 4.27 1.8 1.09 1.11 1.76 2.63 1.76 4.29 0 .71-.15 1.38-.42 2 .14 0 .28.02.42.02 5.41 0 9.8-4.28 9.99-9.65-1.59 1.03-5.55 2.93-10.01-.53Z"/>
				</svg>
				<svg class="icon auto" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
					<path d="M4 6h16v2H4V6Zm0 5h16v2H4v-2Zm0 5h16v2H4v-2Z"/>
				</svg>
			</div>
			<span class="current-theme" id="current-theme-display">{t('themeSelect.auto')}</span>
			<select value="auto">
				<option value="light">{t('themeSelect.light')}</option>
				<option value="dark">{t('themeSelect.dark')}</option>
				<option value="auto">{t('themeSelect.auto')}</option>
				<option value="blue">{t('themeSelect.blue')}</option>
				<option value="forest">{t('themeSelect.forest')}</option>
				<option value="sunset">{t('themeSelect.sunset')}</option>
				<option value="purple">{t('themeSelect.purple')}</option>
			</select>
		</label>
	</div>
</starlight-theme-select>

<script>
const THEMES = {
	LIGHT: 'light',
	DARK: 'dark',
	AUTO: 'auto',
	BLUE: 'blue',
	FOREST: 'forest',
	SUNSET: 'sunset',
	PURPLE: 'purple'
} as const;

const THEME_CLASSES = {
	[THEMES.LIGHT]: 'theme-light',
	[THEMES.DARK]: 'theme-dark',
	[THEMES.AUTO]: 'theme-auto',
	[THEMES.BLUE]: 'theme-blue',
	[THEMES.FOREST]: 'theme-forest',
	[THEMES.SUNSET]: 'theme-sunset',
	[THEMES.PURPLE]: 'theme-purple'
} as const;

const THEME_DISPLAY_NAMES = {
	[THEMES.LIGHT]: 'Light',
	[THEMES.DARK]: 'Dark',
	[THEMES.AUTO]: 'Auto',
	[THEMES.BLUE]: 'Blue Ocean',
	[THEMES.FOREST]: 'Forest Green',
	[THEMES.SUNSET]: 'Sunset Orange',
	[THEMES.PURPLE]: 'Purple Night'
} as const;

const STORAGE_KEY = 'starlight-theme';
const ALL_THEME_CLASSES = Object.values(THEME_CLASSES);

type ThemeType = typeof THEMES[keyof typeof THEMES];

class StarlightThemeSelect extends HTMLElement {
	private mediaQuery: MediaQueryList | null = null;

	constructor() {
		super();

		// Set up system preference listener BEFORE applying theme
		if (typeof matchMedia !== 'undefined') {
			this.mediaQuery = matchMedia('(prefers-color-scheme: dark)');
			this.mediaQuery.addEventListener('change', this.handleSystemThemeChange);
		}

		// Apply initial theme
		this.onThemeChange(this.getTheme());

		// Attach event listener after initialization
		this.querySelector('select')?.addEventListener('change', (e) => {
			if (e.currentTarget instanceof HTMLSelectElement) {
				this.onThemeChange(this.parseTheme(e.currentTarget.value));
			}
		});
	}

	/** Get a typesafe theme string from any JS value (unknown values are coerced to 'auto'). */
	private parseTheme(theme: unknown): ThemeType {
		const validThemes = Object.values(THEMES);
		return validThemes.includes(theme as ThemeType) ? theme as ThemeType : THEMES.AUTO;
	}

	/** Get the current theme setting. */
	private getTheme(): ThemeType {
		return this.parseTheme(
			typeof localStorage !== 'undefined' && localStorage.getItem(STORAGE_KEY)
		);
	}

	/** Update select menu UI, document theme, and local storage state. */
	private onThemeChange(theme: ThemeType) {
		this.updateSelectionUI(theme);
		this.updateThemeDisplay(theme);
		this.updateTheme(theme);
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(STORAGE_KEY, theme);
		}
	}

	/** Set the selection UI state. */
	private updateSelectionUI(theme: ThemeType) {
		const select = this.querySelector('select');
		if (select) select.value = theme;
	}

	/** Update the theme display text. */
	private updateThemeDisplay(theme: ThemeType) {
		const display = this.querySelector('#current-theme-display');
		if (display) {
			display.textContent = THEME_DISPLAY_NAMES[theme];
		}
	}

	/** Apply theme to document - simplified and maintainable */
	private applyTheme(themeName: ThemeType, effectiveTheme?: 'light' | 'dark') {
		const doc = document.documentElement;

		// Remove all theme classes and data-theme attribute
		doc.classList.remove(...ALL_THEME_CLASSES);
		doc.removeAttribute('data-theme');

		// Apply new theme
		doc.setAttribute('data-theme', effectiveTheme || themeName);
		doc.classList.add(THEME_CLASSES[themeName]);
	}

	/** Update the document theme. */
	private updateTheme(theme: ThemeType) {
		if (theme === THEMES.AUTO) {
			// For auto, detect system preference and apply effective theme
			const systemPrefersDark = this.mediaQuery ? this.mediaQuery.matches :
				(typeof matchMedia !== 'undefined' && matchMedia('(prefers-color-scheme: dark)').matches);

			this.applyTheme(THEMES.AUTO, systemPrefersDark ? THEMES.DARK : THEMES.LIGHT);
		} else {
			// For explicit themes, apply directly
			this.applyTheme(theme);
		}
	}

	/** Cleanup method for removing event listeners */
	disconnectedCallback() {
		if (this.mediaQuery) {
			// Note: MediaQueryList.removeEventListener might not be available in all browsers
			// This is a safeguard for proper cleanup
			try {
				this.mediaQuery.removeEventListener('change', this.handleSystemThemeChange);
			} catch (e) {
				// Fallback: removeListener is deprecated but more widely supported
				if ('removeListener' in this.mediaQuery) {
					(this.mediaQuery as any).removeListener(this.handleSystemThemeChange);
				}
			}
		}
	}

	/** Bound method for system theme change handling */
	private handleSystemThemeChange = () => {
		if (this.getTheme() === THEMES.AUTO) {
			this.updateTheme(THEMES.AUTO);
		}
	}
}

customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>

<style>
	.theme-switcher {
		display: flex;
		align-items: center;
		font-size: 0.875rem;
		color: var(--sl-color-gray-2);
	}

	label {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		cursor: pointer;
		padding: 0.375rem 0.75rem;
		border-radius: 0.375rem;
		transition: background-color 0.2s ease, color 0.2s ease;
		position: relative;
	}

	label:hover {
		background-color: var(--sl-color-gray-6);
		color: var(--sl-color-gray-1);
	}

	.theme-label {
		font-weight: 500;
		color: var(--sl-color-gray-1);
		white-space: nowrap;
	}

	.theme-control {
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		width: 1.5rem;
		height: 1.5rem;
	}

	.current-theme {
		font-weight: 600;
		color: var(--sl-color-accent);
		min-width: 4rem;
		text-align: left;
	}

	.icon {
		position: absolute;
		font-size: 1rem;
		width: 1em;
		height: 1em;
		transition: opacity 0.2s ease, color 0.2s ease;
	}

	select {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		border: 0;
		padding: 0;
		margin: 0;
		z-index: 2;
		cursor: pointer;
		opacity: 0;
	}

	/* Icon visibility - optimized with CSS custom properties */
	.icon {
		opacity: 0.6;
		transition: opacity 0.2s ease, color 0.2s ease;
	}

	/* Define which themes use which icons */
	:root {
		--light-themes: light, blue, forest, sunset, purple;
		--dark-themes: dark;
		--auto-themes: auto;
	}

	/* Light-based theme icon visibility */
	:global([data-theme='light']) .icon.light,
	:global([data-theme='blue']) .icon.light,
	:global([data-theme='forest']) .icon.light,
	:global([data-theme='sunset']) .icon.light,
	:global([data-theme='purple']) .icon.light {
		opacity: 1;
		color: var(--sl-color-accent);
	}

	/* Dark theme icon visibility */
	:global([data-theme='dark']) .icon.dark {
		opacity: 1;
		color: var(--sl-color-accent);
	}

	/* Auto mode with special pulsing animation */
	:global(.theme-auto) .icon.auto {
		opacity: 1;
		color: var(--sl-color-accent);
		animation: pulse 2s infinite;
	}

	@keyframes pulse {
		0%, 100% { opacity: 1; }
		50% { opacity: 0.7; }
	}

	/* Inactive icons - simplified using :not() selector */
	:global([data-theme='light']) .icon:not(.light),
	:global([data-theme='dark']) .icon:not(.dark),
	:global([data-theme='blue']) .icon:not(.light),
	:global([data-theme='forest']) .icon:not(.light),
	:global([data-theme='sunset']) .icon:not(.light),
	:global([data-theme='purple']) .icon:not(.light),
	:global(.theme-auto) .icon:not(.auto) {
		opacity: 0.3;
	}

	@media (forced-colors: active) {
		.icon {
			filter: invert(1);
		}
	}
</style>
